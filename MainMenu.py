# Form implementation generated from reading ui file 'MenuV1.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QMessageBox, QGraphicsPixmapItem
from PyQt6.QtCore import QPropertyAnimation, QPoint

import random
import AudioIn as AI

class Ui_PNGTuber(object):
    def __init__(self) -> None:
        self.image1 = 'img1.png'
        self.image2 = 'img2.png'
        self.startedMic = False
        self.inputLevel = 400
        self.curAudioLevel = 0
        self.refreshRate = 20

    def setupUi(self, PNGTuber):
        PNGTuber.setObjectName("PNGTuber")
        PNGTuber.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(PNGTuber)
        self.centralwidget.setObjectName("centralwidget")

        self.PNGView = QtWidgets.QGraphicsView(self.centralwidget)
        self.PNGView.setGeometry(QtCore.QRect(10, 20, 551, 511))
        self.PNGView.setObjectName("PNGView")
        self.scene = QtWidgets.QGraphicsScene()
        self.PNGView.setScene(self.scene)
        self.PNGView.setBackgroundBrush(QtGui.QBrush(QtGui.QColor("#04F404")))

        self.Shake = QtWidgets.QCheckBox(self.centralwidget)
        self.Shake.setGeometry(QtCore.QRect(650, 370, 101, 31))
        self.Shake.setObjectName("Shake")

        self.Start = QtWidgets.QDialogButtonBox(parent=self.centralwidget)
        self.Start.setGeometry(QtCore.QRect(600, 420, 151, 31))
        self.Start.setMouseTracking(False)
        start_button = self.Start.addButton("Start", QtWidgets.QDialogButtonBox.ButtonRole.ActionRole)
        start_button.clicked.connect(self.start_microphone)
        stop_button = self.Start.addButton("Stop", QtWidgets.QDialogButtonBox.ButtonRole.ActionRole)
        stop_button.clicked.connect(self.stop_microphone)
        self.Start.setCenterButtons(True)
        self.Start.setObjectName("Start")

        self.Image1 = QtWidgets.QToolButton(self.centralwidget)
        self.Image1.setGeometry(QtCore.QRect(610, 180, 131, 22))
        self.Image1.setObjectName("Image1")

        self.Image2 = QtWidgets.QToolButton(self.centralwidget)
        self.Image2.setGeometry(QtCore.QRect(610, 270, 131, 22))
        self.Image2.setObjectName("Image2")

        self.File1 = QtWidgets.QLabel(self.centralwidget)
        self.File1.setGeometry(QtCore.QRect(640, 210, 200, 16))
        self.File1.setObjectName("File1")

        self.File2 = QtWidgets.QLabel(self.centralwidget)
        self.File2.setGeometry(QtCore.QRect(640, 300, 200, 16))
        self.File2.setObjectName("File2")

        PNGTuber.setCentralWidget(self.centralwidget)

        # Menu
        self.menubar = QtWidgets.QMenuBar(PNGTuber)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")

        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        PNGTuber.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(PNGTuber)
        self.statusbar.setObjectName("statusbar")
        PNGTuber.setStatusBar(self.statusbar)

        self.actionImport = QtGui.QAction(PNGTuber)
        self.actionImport.setObjectName("actionImport")
        self.actionImport.setCheckable(True)
        self.actionImport.setShortcutVisibleInContextMenu(True)
        self.menuOptions.addAction(self.actionImport)

        self.actionExport = QtGui.QAction(PNGTuber)
        self.actionExport.setObjectName("actionExport")
        self.actionExport.setCheckable(True)
        self.actionExport.setShortcutVisibleInContextMenu(True)
        self.menuOptions.addAction(self.actionExport)

        self.actionSettings = QtGui.QAction(PNGTuber)
        self.actionSettings.setObjectName("actionSettings")
        self.actionSettings.setCheckable(True)
        self.actionSettings.setShortcutVisibleInContextMenu(True)
        self.menuOptions.addAction(self.actionSettings)

        # Create toggleable action for Fullscreen
        self.actionFullscreen = QtGui.QAction(PNGTuber)
        self.actionFullscreen.setCheckable(True)
        self.actionFullscreen.setObjectName("actionFullscreen")
        self.actionFullscreen.triggered.connect(self.toggle_fullscreen)
        self.menuOptions.addAction(self.actionFullscreen)

        self.menubar.addAction(self.menuOptions.menuAction())

        self.retranslateUi(PNGTuber)
        QtCore.QMetaObject.connectSlotsByName(PNGTuber)


    def retranslateUi(self, PNGTuber):
        _translate = QtCore.QCoreApplication.translate
        PNGTuber.setWindowTitle(_translate("PNGTuber", "PNGTuber"))
        self.Shake.setText(_translate("PNGTuber", "Shake?"))
        self.Image1.setText(_translate("PNGTuber", "Select Image 1"))
        self.Image2.setText(_translate("PNGTuber", "Select Image 2"))
        self.File1.setText(_translate("PNGTuber", "Image File 1"))
        self.File2.setText(_translate("PNGTuber", "Image File 2"))
        self.menuOptions.setTitle(_translate("PNGTuber", "Options"))
        self.actionImport.setText(_translate("PNGTuber", "Import"))
        self.actionExport.setText(_translate("PNGTuber", "Export"))
        self.actionSettings.setText(_translate("PNGTuber", "Settings"))
        self.actionFullscreen.setText(_translate("PNGTuber", "Fullscreen"))


    ## Message code
    def raiseWarning(self, message):
        warning_msg = QMessageBox()
        warning_msg.setIcon(QMessageBox.Icon.Warning)
        warning_msg.setText(message)
        warning_msg.setWindowTitle("Warning")
        warning_msg.exec()

    def raiseMessage(self, message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setText(message)
        msg.setWindowTitle("Message")
        msg.exec()

    ## Microphone

    def start_microphone(self):
        if not self.startedMic:
            self.microphone = AI.MicrophoneInput()
            self.microphone.start()
            self.startedMic = True
            self.update_Audio_Level()
            self.switch_images()

    def stop_microphone(self):
        if self.startedMic:
            self.microphone.stop()
            self.startedMic = False

    def update_Audio_Level(self):
        self.curAudioLevel = self.microphone.curVal()
        print(self.curAudioLevel)
        QtCore.QTimer.singleShot(self.refreshRate, self.update_Audio_Level)


    ## Images
        
    def switch_images(self):
        if self.curAudioLevel >= self.inputLevel:
            self.viewImage(self.image2, shake=self.Shake.isChecked())
        else:
            self.viewImage(self.image1)
        QtCore.QTimer.singleShot(self.refreshRate, self.switch_images)


    def load_image(self):
        file_dialog = QFileDialog()
        file_dialog.setNameFilter("Image Files (*.png *.jpg *.bmp)")
        file_dialog.setViewMode(QFileDialog.ViewMode.List)
        file_dialog.setDirectory("C:/")  # Set default directory if needed
        if file_dialog.exec():
            file_names = file_dialog.selectedFiles()
            if file_names:
                image_path = file_names[0]
                return image_path

    def getName(self, filepath):
        split = filepath.split('/')
        return split[-1]
    

    def shake_image(self, image):
        dx = random.randint(-5, 5)  # Random horizontal movement
        dy = random.randint(-5, 5)  # Random vertical movement
        image.moveBy(dx, dy)

    def viewImage(self, filename, shake=False):
        self.scene.clear()
        image = QtGui.QImage(filename)
        if image.isNull():
            self.raiseWarning("Error: Unable to load image")
            return

        pixmap = QtGui.QPixmap.fromImage(image)
        pixmap = pixmap.scaled(self.PNGView.viewport().size(), QtCore.Qt.AspectRatioMode.KeepAspectRatio, QtCore.Qt.TransformationMode.SmoothTransformation)
        pixmapItem = QtWidgets.QGraphicsPixmapItem(pixmap)
        self.scene.addItem(pixmapItem)

        if shake:
            try:
                self.shake_image(pixmapItem)
            except Exception as e:
                print(e)

        self.scene.setSceneRect(QtCore.QRectF(pixmapItem.boundingRect()))


    def load_image1(self):
        self.image1 = self.load_image()
        if self.image1:
            self.File1.setText(self.getName(self.image1))
            self.updateView()

    def load_image2(self):
        self.image2 = self.load_image()
        if self.image2:
            self.File2.setText(self.getName(self.image2))
            self.updateView()

    def updateView(self):
        if self.image2 and self.image1:
            self.viewImage(self.image2)
        if self.image1:
            self.viewImage(self.image1)

    ## Fullscreen for
    def toggle_fullscreen(self):
        if self.actionFullscreen.isChecked():
            print("Fullscreen activated")
            # Hide all UI elements
            self.Shake.hide()
            self.Start.hide()
            self.Image1.hide()
            self.Image2.hide()
            self.File1.hide()
            self.File2.hide()
            self.menuOptions.hide()
            self.statusbar.hide()
            # Resize PNGView to fill the entire central widget
            self.PNGView.setGeometry(self.centralwidget.geometry())  
        else:
            print("Fullscreen deactivated")
            # Show all UI elements
            self.Shake.show()
            self.Start.show()
            self.Image1.show()
            self.Image2.show()
            self.File1.show()
            self.File2.show()
            self.menuOptions.show()
            self.statusbar.show()
            # Restore original size and position of PNGView
            self.PNGView.setGeometry(QtCore.QRect(10, 20, 551, 511))  
